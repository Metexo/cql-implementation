/* Generated By:JavaCC: Do not edit this line. CQLParser.java */
import model.SensorData;

import java.io.Reader;
import java.io.StringReader;
import java.util.stream.Stream;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Supplier;

public class CQLParser implements CQLParserConstants {
        private Stream<SensorData> inputDataStream;
        private Stream<SensorData> outputStream;

        private List<Token> tokenList;

    public CQLParser(String query, Stream<SensorData> sensorDataStream){
        this((Reader)(new StringReader(query)));
                this.inputDataStream = sensorDataStream;
                tokenList = new ArrayList<>();
    }

        private long fromWindowTokenToLong(Token windowToken) {
                String windowTokenValue = windowToken.image;
                String[] splittedTable = windowTokenValue.split(" ");
        String numberToSubstring = splittedTable[1];
                String number = numberToSubstring.substring(0, numberToSubstring.length() - 1);
                return Long.parseLong(number);
        }

        private Stream<SensorData> selectionRules(Token windowToken) {
                long windowSize = fromWindowTokenToLong(windowToken);
                String[] tokenValues = new String[3];
                        if(tokenList.size() == 2) {
                                for(int i = 0; i < tokenList.size(); i++) {
                                        tokenValues[i] = tokenList.get(i).image;
                                }
                          return inputDataStream.filter(g -> g.getName().equals(tokenValues[0]) || g.getName().equals(tokenValues[1]))
                                  .filter(g -> g.getTimestamp()  <= windowSize);
                        }
                        else if(tokenList.size() == 1) {
                                tokenValues[0] = tokenList.get(0).image;
                          return inputDataStream.filter(g -> g.getName().equals(tokenValues[0]))
                                  .filter(g -> g.getTimestamp()  <= windowSize);
                        }
                return inputDataStream;
        }

  final public Stream<SensorData> parse() throws ParseException {
    trace_call("parse");
    try {
Stream<SensorData> selectionStream;
      selectionStream = selection();
      fromWhere();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        withCondition();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jj_consume_token(0);
          {if (true) return selectionStream;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("parse");
    }
  }

  final public Stream<SensorData> selection() throws ParseException {
    trace_call("selection");
    try {
        Stream<SensorData> selectionStream;
        Token windowToken;
      jj_consume_token(SELECT);
      windowToken = jj_consume_token(WINDOW);
      attr();
                                           selectionStream = selectionRules(windowToken);
          {if (true) return selectionStream;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("selection");
    }
  }

  final public void attr() throws ParseException {
    trace_call("attr");
    try {
        Token token;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case AVG:
      case SUM:
      case STRING:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AVG:
        case SUM:
          aggregation();
          break;
        case STAR:
          jj_consume_token(STAR);
          break;
        case STRING:
          token = jj_consume_token(STRING);
                        tokenList.add(token);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        attr();
      }
    } finally {
      trace_return("attr");
    }
  }

  final public void aggregation() throws ParseException {
    trace_call("aggregation");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AVG:
        jj_consume_token(AVG);
        break;
      case SUM:
        jj_consume_token(SUM);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAREN);
      jj_consume_token(STRING);
      jj_consume_token(RPAREN);
    } finally {
      trace_return("aggregation");
    }
  }

  final public void fromWhere() throws ParseException {
    trace_call("fromWhere");
    try {
      jj_consume_token(FROM);
      jj_consume_token(STRING);
    } finally {
      trace_return("fromWhere");
    }
  }

  final public void withCondition() throws ParseException {
    trace_call("withCondition");
    try {
      jj_consume_token(WHERE);
      condition();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          jj_consume_token(OR);
          break;
        case AND:
          jj_consume_token(AND);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        condition();
      }
    } finally {
      trace_return("withCondition");
    }
  }

  final public void condition() throws ParseException {
    trace_call("condition");
    try {
      jj_consume_token(STRING);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
        break;
      case LOWER:
        jj_consume_token(LOWER);
        break;
      case GRATER:
        jj_consume_token(GRATER);
        break;
      case LESSEREQUAL:
        jj_consume_token(LESSEREQUAL);
        break;
      case GRATEREQUAL:
        jj_consume_token(GRATEREQUAL);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(NUMBER);
    } finally {
      trace_return("condition");
    }
  }

  /** Generated Token Manager. */
  public CQLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x801840,0x801840,0x10000,0x1800,0x600,0x600,0x1e8000,};
   }

  /** Constructor with InputStream. */
  public CQLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CQLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CQLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CQLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CQLParser(CQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CQLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
